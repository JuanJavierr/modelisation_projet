---
title: "Modélisation - Projet partie 1"
date: 2023-10-13
author:
    - Hilaire Touyem
    - Xavier Lapointe
    - Georges-Lemuel Balogog-Mandack
    - Xavier Péladeau
format:
  html:
    code-fold: true
---
### TODO: Considérer des interactions potentielles entre les variables explicatives
### TODO: Vérifier l'impact d'enlever les valeurs aberrantes sur la précision des modèles

### TODO: 
"Chaque fois qu’un modèle statistique est employé, veillez à :
    - rapporter les coefficients ou les différences estimées (avec des unités), avec une estimation de
    l’incertitude,
    - fournir des interprétations des paramètres sur une échelle adéquate,
    - tirer des conclusions qui reflètent le contexte,
    - discuter de la validité de vos analyses,
    - discuter de toute lacune ou limitation de vos modèles."

# Import et formatage des données
```{r}
#| label: setup
#| output: false

library(tidyverse)
library(gridExtra)
library(emmeans)

# On charge les données
data_filename <- "MATH60604-projet-bixi_partie1_equipe1.csv"
raw_data <- read.csv(data_filename)

# On convertit les colonnes aux types appropriés
data <- raw_data %>%
    mutate(
        date = ymd_hms(dep),
        jour = as.factor(jour),
        mem = as.logical(mem),
        pointe = as.factor(pointe)
    ) %>%
    select(-c(dep))

# On ajoute des colonnes utiles à l'analyse
data <- data %>%
    mutate(
        hour = as.integer(format(date, format = "%H")),
        day = as.Date(date),
        is_weekend = jour %in% c("samedi", "dimanche")
    )

data <- mutate(data, log_dur = log(dur))
```


# Analyse exploratoire
```{r}
#| label: EDA1
#| echo: false

# On affiche la distribution de la variable réponse
plot_dur <- function() {
    ggplot(data, aes(x = dur)) +
        geom_histogram(bins = 30) +
        labs(
            title = "Distribution des durées des déplacements",
            x = "Durée (s)", y = "Nombre de déplacements"
        ) +
        theme_minimal()
}
plot_dur()
```
La distribution des durées des déplacements semble être asymétrique à droite. Il pourrait être intéressant de considérer une transformation logarithmique pour la variable réponse.

```{r}
#| label: EDA
#| echo: false

summary(data)

"Combien de déplacements par jour de la semaine?"
by_weekday <- data %>%
    group_by(jour) %>%
    summarise(n = n())

ggplot() + geom_col(data=by_weekday, aes(x=jour, y=n)) +
    labs(
        title = "Nombre de déplacements par jour de la semaine",
        x = "Jour de la semaine", y = "Nombre de déplacements"
    ) +
    theme_minimal()

"Combien de déplacements par heure de la journée?"
by_hour <- data %>%
    group_by(hour) %>%
    summarise(n = n())
ggplot() + geom_col(data=by_hour, aes(x=hour, y=n)) +
    labs(
        title = "Nombre de déplacements par heure de la journée",
        x = "Heure", y = "Nombre de déplacements"
    ) +
    theme_minimal()

"Combien de déplacements par jour?"
by_date <- data %>%
    group_by(day) %>%
    summarise(n = n())
ggplot() + geom_col(data=by_date, aes(x=day, y=n)) +
    labs(
        title = "Nombre de déplacements par jour",
        x = "Date", y = "Nombre de déplacements"
    ) +
    theme_minimal() + scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y") 

```

# QUESTION 1.1 : En moyenne, les membres de BIXI effectuent-ils des trajets plus courts que les non-membres?
Nous sommes intéressés par l'hypothèse suivante: $\mathbb{H}_0: \beta_1 = 0$

Où: $\beta_1 = \mu_{\text{membre}} - \mu_{\text{non-membre}}$


```{r}
#| label: question1.1
#| code-fold: false

# On effectue un test t pour comparer les moyennes
model <- lm(dur ~ mem, data = data)
summary(model)$coefficients

transform_coefs <- function(log_model) {
    # Obtenir les coefficients et les intervalles de confiance du modèle
    coefficients <- summary(log_model)$coefficients
    confint_values <- confint(log_model)

    # Extraire les résultats pour la variable d'intérêt, ici 'mem'
    beta_mem <- coefficients['memTRUE', 'Estimate']  # Coefficient pour les membres
    p_value_mem <- coefficients['memTRUE', 'Pr(>|t|)']  # P-value associée

    # Calculer l'intervalle de confiance à 95%
    ci_lower <- confint_values['memTRUE', 1]  # Borne inférieure
    ci_upper <- confint_values['memTRUE', 2]  # Borne supérieure

    # Exponentier le coefficient et les intervalles pour revenir à l'échelle d'origine
    exp_beta_mem <- exp(beta_mem)
    exp_ci_lower <- exp(ci_lower)
    exp_ci_upper <- exp(ci_upper)

    return(c(exp_ci_lower, exp_ci_upper))
}

ci <- transform_coefs(model)

```
On rejette l'hypothèse nulle au niveau de signification de 0.05. Oui, les membres de BIXI effectuent des trajets entre `{r} ci[1]` et `{r} ci[2]` secondes plus courts que les non-membres, à un niveau de significativité de `{r} summary(model)$coefficients['memTRUE', 'Pr(>|t|)']`.

```{r}

confidence_interval <- confint(model, level = 0.95)
prediction <- predict(
    model,
    newdata = data.frame(mem = c(TRUE, FALSE)),
    interval = "c",
    level = 0.8
)

predci <- data.frame(cbind(
    is_member = c(TRUE, FALSE),
    prediction
))

ggplot() +
    geom_point(data = predci, aes(x = is_member, y = fit)) +
    geom_ribbon(
        data = predci,
        aes(x = is_member, ymin = lwr, ymax = upr),
        alpha = 0.4
    )
```

# QUESTION 1.2 : Les résultats sont-ils les mêmes si l’on tient compte de l’utilisation en fin de semaine ou en semaine?
# Slide 36 - seance 4
On commence par séparer les données en fin de semaine et en semaine, puis on ajuste un modèle linéaire pour chaque groupe:
```{r}
#| label: question1.2
#| code-fold: false
week_ends <- data %>% filter(is_weekend)
week_days <- data %>% filter(!is_weekend)

weekend_model <- lm(dur ~ mem, data=week_ends)
summary(weekend_model)$coefficients
confint(weekend_model, level = 0.95)

weekday_model <- lm(dur ~ mem, data=week_days)
summary(weekday_model)$coefficients
confint(weekday_model, level = 0.95)


anova(weekend_model, weekday_model)
```
Réponse 1.2 : Oui, les résultats sont les mêmes si l'on tient compte de l'utilisation en fin de semaine ou en semaine. L'effet est plus significatif en fin de semaine.

# QUESTION 2.1 : Est-ce que la durée des trajets est influencée par la météo?
## Question piège? On ne peut pas établir de lien de causalité entre la météo et la durée des trajets. On peut seulement dire qu'il y a une corrélation entre les deux.
## On test d'abord l'impact des précipitations
```{r}
data <- data %>% mutate(is_raining = prec > 0)

# Avec indicateur binaire de pluie
model <- lm(dur ~ is_raining, data=data)
summary(model)

# Avec niveau de précipitation
model <- lm(dur ~ prec, data=data)
summary(model)

confint(model, level = 0.95)
```

# Puis, l'impact de la température
```{r}
model <- lm(dur ~ temp, data=data)
summary(model)$coefficients
```

# QUESTION 2.2 : Au vu du résultat que vous obtenez,est-ce que vos modèles initiaux devraient être revisités?


# QUESTION 3.1 : Les durées de trajets sont-elles différentes selon que l’on se trouve aux heures de pointe ou non en semaine?
Nous sommes intéressés par l'hypothèse suivante: $\mathbb{H}_0: \beta_1 = 0$

Où: $\beta_1 = \mu_{\text{pointe} \in {1,2}} - \mu_{\text{pointe}=3}$
```{r}
# TODO: Vérifier si le facteur par défaut est le bon
week_days <- week_days %>% mutate(pointe = fct_relevel(pointe, c("3", "2", "1")), is_rush = pointe %in% c("1", "2"))

model <- lm(dur ~ is_rush, data = week_days)
summary(model)$coefficients
confint(model, level = 0.95)
```

# QUESTION 3.2 : Existe-t-il des différences entre l’utilisation pour les heures de pointes en semaine le matin ou le soir?
```{r}

# TODO: Tester pour la variance aussi
# week_days_only_rush <- week_days %>% filter(pointe %in% c("1", "2"))

model <- lm(dur ~ pointe, data=week_days)
emm <- emmeans(model, ~ pointe)

# Define and test contrasts between the different categories of pointe
# Contrast to compare morning peak (1) vs evening peak (2)
contrast_results <- contrast(emm, method = list("Morning vs Evening" = c(1, -1, 0)))

summary(model)$coefficients
confint(model, level = 0.95)
```


# Graphiques WIP
```{r}

# On crée un graphique pour visualiser la distribution des distances

plot1 <- ggplot(week_ends, aes(x = dur, fill = mem)) +
    geom_histogram(bins = 30) +
    labs(
        title = "Distribution des distances des déplacements en fin de semaine",
        x = "Durée (s)", y = "Nombre de déplacements"
    ) +
    theme_minimal()

plot2 <- ggplot(week_days, aes(x = dur, fill = mem)) +
    geom_histogram(bins = 30) +
    labs(
        title = "Distribution des distances des déplacements en semaine",
        x = "Durée (s)", y = "Nombre de déplacements"
    ) +
    theme_minimal()

grid.arrange(plot1, plot2, ncol = 1)

```